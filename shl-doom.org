#+title: Doom Emacs Literate Configuration
#+author: Sebastian Hempel Linde
#+email: sebastian@hempellinde.com
#+language: en
#+options: ':t toc:nil num:t author:t email:t

* 1 - Doom Configuration

** 1.1 - Setup

*** 1.1.1 - ~init.el~

Bring together the ~init.el~ file.
This file determines what modules are loaded from the Doom emacs module set.

#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :noweb-ref none
;;; init.el --- -*- lexical-binding: t -*-

;; This file controls what Doom modules are enabled and what order they load in.
;; Press 'K' on a module to view it's documentation, and 'gd' to browse its directory.

(doom! :input
       <<doom-input>>

       :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>)
#+end_src


*** 1.1.2 - ~package.el~

#+begin_src emacs-lisp :tangle "packages.el"
;;; package.el --- -*- lexical-binding: t -*-
#+end_src


** 1.2 - Input

*** 1.2.1 - Doom Modules

#+name: doom-input
#+begin_src emacs-lisp
;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
;;chinese
;;japanese
;;layout            ; auie,ctsrnm is the superior home row
#+end_src

*** 1.2.2 - Packages
*** 1.2.3 - Configuration

#+begin_src emacs-lisp :tangle "config.el"
;;; config.el --- -*- lexical-binding: t -*-
#+end_src

** 1.3 - Completion
*** 1.3.1 - Doom Modules

#+name: doom-completion
#+begin_src emacs-lisp
(company
 +childframe)       ; the ultimate code completion backend
(vertico
 +icons)            ; the search engine of the future
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
;;ivy               ; a search engine for love and life
#+end_src

*** 1.3.2 - Packages

*** 1.3.3 - Configuration

#+begin_src emacs-lisp :tangle "config.el" :noweb no-export :noweb-ref none
;; [[ Doom - Completion ]]

;; Company
<<config-completion-company>>
#+end_src

**** 1.3.3.1 - Company

#+name: config-completion-company
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0
        company-minimum-prefix-length 1))

(map! :after company
      :map company-active-map
      "C-y" #'company-complete-selection
      [return] nil)

(setq-default history-length 1000
              prescient-history-length 1000)

#+end_src

** 1.4 - UI
*** 1.4.1 - Doom Modules

#+name: doom-ui
#+begin_src emacs-lisp
;;deft              ; notational velocity for Emacs
doom                ; what makes DOOM look the way it does
doom-dashboard      ; a nifty splash screen for Emacs
;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
;;(emoji +unicode)  ; ðŸ™‚
hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
;;indent-guides     ; highlighted indent columns
ligatures           ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline            ; snazzy, Atom-inspired modeline, plus API
;;nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints             ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
;;tabs              ; a tab bar for Emacs
;;treemacs          ; a project drawer, like neotree but cooler
;;unicode           ; extended unicode support for various languages
(vc-gutter +pretty) ; vcs diff in the fringe
;;vi-tilde-fringe   ; fringe tildes to mark beyond EOB
;;window-select     ; visually switch windows
workspaces          ; tab emulation, persistence & separate workspaces
zen                 ; distraction-free coding or writing
#+end_src

*** 1.4.2 - Packages

#+begin_src emacs-lisp :tangle "packages.el"
;; [[ UI ]]
(package! ef-themes)
(package! modus-themes)
#+end_src

*** 1.4.4 - Configuration

#+begin_src emacs-lisp :tangle "config.el" :noweb no-export :noweb-ref none
;; [[ UI ]]
;; General
<<config-ui-general>>

;; Theme
<<config-ui-theme>>

;; Font
<<config-ui-font>>
#+end_src

**** 1.4.4.1 - General

#+name: config-ui-general
#+begin_src emacs-lisp
(setq display-line-numbers-type `relative)
#+end_src

**** 1.4.4.2 - Theme

#+name: config-ui-theme
#+begin_src emacs-lisp
(use-package! modus-themes
  :config
  (setq modus-themes-custom-auto-reload nil
        modus-themes-mixed-fonts t
        modus-themes-variable-pitch-ui t
        modus-themes-italic-constructs t
        modus-themes-completions '((t . (extrabold)))
        modus-themes-prompts '(extrabold)))

(use-package! ef-themes
  :config
  (setq ef-themes-variable-pitch-ui t
        ef-themes-mixed-fonts t))

(setq doom-theme 'modus-vivendi-tinted)
#+end_src

**** 1.4.4.3 - Font

#+name: config-ui-font
#+begin_src emacs-lisp
;; (setq doom-font (font-spec :family "Iosevka Comfy" :size 13 :weight 'medium)
;;      doom-variable-pitch-font (font-spec :family "Iosevka Comfy Duo" :size 13))
(setq doom-font (font-spec :family "RobotoMono Nerd Font" :size 14 :weight 'medium)
     doom-variable-pitch-font (font-spec :family "Iosevka Comfy Duo" :size 14))
#+end_src

** 1.5 - Editor
*** 1.5.1 - Doom Modules

#+name: doom-editor
#+begin_src emacs-lisp
;; (evil +everywhere); come to the dark side, we have cookies
file-templates       ; auto-snippets for empty files
fold                 ; (nigh) universal code folding
(format +onsave)     ; automated prettiness
;; god               ; run Emacs commands without modifier keys
;; lispy             ; vim for lisp, for people who don't like vim
multiple-cursors     ; editing in many places at once
;; objed             ; text object editing for the innocent
;; parinfer          ; turn lisp into python, sort of
;; rotate-text       ; cycle region at point between text candidates
snippets             ; my elves. They type so I don't have to
;; word-wrap         ; soft wrapping with language-aware indent
#+end_src

*** 1.5.2 - Packages
*** 1.5.3 - Configuration

#+begin_src emacs-lisp :tangle "config.el" :noweb no-export :noweb-ref none
;; [[ Editor ]]

;; Avy
<<config-editor-avy>>
#+end_src

**** 1.5.3.1 - Avy

#+name: config-editor-avy
#+begin_src emacs-lisp
(map! "M-j" #'avy-goto-char-timer)
#+end_src

**** 1.5.3.2 - Consult

#+name: config-editor-consult
#+begin_src emacs-lisp
(map! "M-s M-o" #'consult-outline)
#+end_src

** 1.6 - Emacs
*** 1.6.1 - Doom Modules

#+name: doom-emacs
#+begin_src emacs-lisp
(dired +icons)    ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
(ibuffer +icons)  ; interactive buffer management
undo              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+end_src

** 1.7 - Term
*** 1.7.1 - Doom Modules

#+name: doom-term
#+begin_src emacs-lisp
;;eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm               ; the best terminal emulation in Emacs
#+end_src

** 1.8 - Checkers
*** 1.8.1 - Doom Modules

#+name: doom-checkers
#+begin_src emacs-lisp
syntax              ; tasing you for every semicolon you forget
;;(spell +flyspell) ; tasing you for misspelling mispelling
;;grammar           ; tasing grammar mistake every you make
#+end_src

** 1.9 - Tools
*** 1.9.1 - Doom Modules

#+name: doom-tools
#+begin_src emacs-lisp
;;ansible
;;biblio            ; Writes a PhD for you (citation needed)
;;collab            ; buffers with friends
;;debugger          ; FIXME stepping through code, to help you add bugs
;;direnv
;;docker
;;editorconfig      ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval +overlay)     ; run code, run (also, repls)
(lookup +docsets)   ; navigate your code and its documentation
lsp                 ; M-x vscode
magit               ; a git porcelain for Emacs
;;make              ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf                 ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
;;rgb               ; creating color strings
;;taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
tree-sitter         ; syntax and parsing, sitting in a tree...
;;upload            ; map local to remote projects via ssh/ftp
#+end_src

** 1.10 - OS
*** 1.10.1 - Doom Modules

#+name: doom-os
#+begin_src emacs-lisp
(:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
;;tty               ; improve the terminal Emacs experience
#+end_src

** 1.11 - Lang
*** 1.11.1 - Doom Modules

#+name: doom-lang
#+begin_src emacs-lisp
;;agda              ; types of types of types of types...
;;beancount         ; mind the GAAP
;;(cc +lsp)         ; C > C++ == 1
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
;;data              ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;dhall
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp          ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go +lsp)         ; the hipster dialect
;;(graphql +lsp)    ; Give queries a REST
;;(haskell +lsp)    ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
;;json              ; At least it ain't XML
;;(java +lsp)       ; the poster child for carpal tunnel syndrome
;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
;;latex             ; writing papers in Emacs has never been so fun
;;lean              ; for folks with too much to prove
;;ledger            ; be audit you can be
;;lua               ; one-based indices? one-based indices
markdown            ; writing docs for people to ignore
;;nim               ; python + lisp at the speed of c
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org +pretty)       ; organize your plain life in plain text
;;php               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
;;purescript        ; javascript, but functional
(python
 +lsp
 +tree-sitter
 +pyright)          ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme +guile)   ; a fully conniving family of lisps
sh                  ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
;;web               ; the tubes
;;yaml              ; JSON, but readable
(zig
 +lsp
 +tree-sitter)      ; C, but simpler
#+end_src

** 1.12 - Email
*** 1.12.1 - Doom Modules

#+name: doom-email
#+begin_src emacs-lisp
;;(mu4e +org +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src

** 1.13 - App
*** 1.13.1 - Doom Modules

#+name: doom-app
#+begin_src emacs-lisp
;;calendar
;;emms
;;everywhere        ; *leave* Emacs!? You must be joking
;;irc               ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought
#+end_src

** 1.14 - Config
*** 1.14.1 - Doom Modules

#+name: doom-config
#+begin_src emacs-lisp
;; literate
(default +bindings +smartparens)
#+end_src

* 2 - Personal Configuration

** 2.1 - Base

#+begin_src emacs-lisp :tangle "config.el" :noweb no-export :noweb-ref none
;; [[ Personal - Base ]]

;; Information
<<config-personal-information>>

;; Defaults
<<config-personal-defaults>>

;; Windows
<<config-personal-windows>>
#+end_src

*** 2.1.1 - Personal Information

#+name: config-personal-information
#+begin_src emacs-lisp
(setq user-full-name "Sebastian Hempel Linde"
      user-mail-address "sebastian@hempellinde.com")
#+end_src

*** 2.1.2 - Defaults

#+name: config-personal-defaults
#+begin_src emacs-lisp
(setq-default delete-by-moving-to-trash t                   ; Move deleted files to trash
              x-stretch-cursor t)                           ; Make cursor fit glyph width

(display-time-mode 1)                                       ; Display time in modeline
(global-subword-mode 1)                                     ; Iterate through CamelCase words

;;; Battery
(require 'battery)
(when (and battery-status-function
         (not (equal (alist-get ?L (funcall battery-status-function))
                     "N/A")))
    (display-battery-mode 1))

#+end_src

*** 2.1.3 - Windows

#+name: config-personal-windows
#+begin_src emacs-lisp
(defun hsplit-last-buffer ()
  "Focus to the last created horizontal window"
  (interactive)
  (split-window-vertically)
  (other-window 1))

(defun vsplit-last-buffer ()
  "Focus to the last created vertical window"
  (interactive)
  (split-window-horizontally)
  (other-window 1))

(map! "C-x 2" #'hsplit-last-buffer
      "C-x 3" #'vsplit-last-buffer)

(defadvice! prompt-for-buffer (&rest _)
  :after '(vsplit-last-buffer hsplit-last-buffer)
  (consult-buffer))
#+end_src

** 2.2 - Org

*** 2.2.1 - Packages

#+begin_src emacs-lisp :tangle "packages.el"
(package! org-modern)
#+end_src

*** 2.2.2 - Configuration

#+begin_src emacs-lisp :tangle "config.el" :noweb no-export :noweb-ref none
;; [[ Personal - Org ]]

;; Org-modern
#+end_src

#+RESULTS:

**** 2.2.2.1 - Org Modern

#+name: shl-org-modern
#+begin_src emacs-lisp
#+end_src
